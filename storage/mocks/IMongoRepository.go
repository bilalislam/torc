// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/bilalislam/torc/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// IMongoRepository is an autogenerated mock type for the IMongoRepository type
type IMongoRepository struct {
	mock.Mock
}

// Connect provides a mock function with given fields: dbContext
func (_m *IMongoRepository) Connect(dbContext interface{}) error {
	ret := _m.Called(dbContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dbContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *IMongoRepository) Delete(id string) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id, model
func (_m *IMongoRepository) GetById(id string, model models.IModel) error {
	ret := _m.Called(id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.IModel) error); ok {
		r0 = rf(id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOneByQuery provides a mock function with given fields: filter, model
func (_m *IMongoRepository) GetOneByQuery(filter interface{}, model models.IModel) error {
	ret := _m.Called(filter, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, models.IModel) error); ok {
		r0 = rf(filter, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: model
func (_m *IMongoRepository) Save(model models.IModel) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.IModel) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: model
func (_m *IMongoRepository) Update(model models.IModel) (int64, error) {
	ret := _m.Called(model)

	var r0 int64
	if rf, ok := ret.Get(0).(func(models.IModel) int64); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.IModel) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByQuery provides a mock function with given fields: filter, update
func (_m *IMongoRepository) UpdateByQuery(filter interface{}, update interface{}) (int64, error) {
	ret := _m.Called(filter, update)

	var r0 int64
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) int64); ok {
		r0 = rf(filter, update)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(filter, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
