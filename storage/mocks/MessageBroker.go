// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	rabbitmq "github.com/bilalislam/torc/rabbitmq"
	mock "github.com/stretchr/testify/mock"
)

// MessageBroker is an autogenerated mock type for the MessageBroker type
type MessageBroker struct {
	mock.Mock
}

// CreateChannel provides a mock function with given fields:
func (_m *MessageBroker) CreateChannel() (*rabbitmq.BrokerChannel, error) {
	ret := _m.Called()

	var r0 *rabbitmq.BrokerChannel
	if rf, ok := ret.Get(0).(func() *rabbitmq.BrokerChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rabbitmq.BrokerChannel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnection provides a mock function with given fields: parameters
func (_m *MessageBroker) CreateConnection(parameters rabbitmq.MessageBrokerParameter) error {
	ret := _m.Called(parameters)

	var r0 error
	if rf, ok := ret.Get(0).(func(rabbitmq.MessageBrokerParameter) error); ok {
		r0 = rf(parameters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignalConnection provides a mock function with given fields:
func (_m *MessageBroker) SignalConnection() chan bool {
	ret := _m.Called()

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// SignalConnectionStatus provides a mock function with given fields: status
func (_m *MessageBroker) SignalConnectionStatus(status bool) {
	_m.Called(status)
}
