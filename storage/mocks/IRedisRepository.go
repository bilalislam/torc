// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/bilalislam/torc/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// IRedisRepository is an autogenerated mock type for the IRedisRepository type
type IRedisRepository struct {
	mock.Mock
}

// Connect provides a mock function with given fields: dbContext
func (_m *IRedisRepository) Connect(dbContext interface{}) error {
	ret := _m.Called(dbContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dbContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *IRedisRepository) Delete(id string) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id, model
func (_m *IRedisRepository) GetById(id string, model models.IModel) error {
	ret := _m.Called(id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.IModel) error); ok {
		r0 = rf(id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKeyPrefix provides a mock function with given fields:
func (_m *IRedisRepository) GetKeyPrefix() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Save provides a mock function with given fields: model
func (_m *IRedisRepository) Save(model models.IModel) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.IModel) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKeyPrefix provides a mock function with given fields: key
func (_m *IRedisRepository) SetKeyPrefix(key string) {
	_m.Called(key)
}

// Update provides a mock function with given fields: model
func (_m *IRedisRepository) Update(model models.IModel) (int64, error) {
	ret := _m.Called(model)

	var r0 int64
	if rf, ok := ret.Get(0).(func(models.IModel) int64); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.IModel) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
